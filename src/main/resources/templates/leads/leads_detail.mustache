{{>main/header}}

<style>

    .progress-container {
        position: relative;
        width: 100%;
        height: 70px; /* 높이를 조금 늘립니다 */
        margin: 20px 0;
    }

    .progress-bar {
        position: absolute;
        top: 38%; /* 중앙 정렬 */
        left: 10%; /* Qualification 원의 중앙에서 시작하도록 조정합니다 */
        transform: translateY(-50%);
        width: 0;
        max-width: calc(100% - 20%); /* ✅ 마지막 `step`을 초과하지 않도록 제한 */
        height: 10px;
        background-color: green;
        transition: width 0.4s ease;
    }

    .progress-steps {
        display: flex;
        justify-content: space-between;
        position: absolute;
        top: 50%; /* 중앙 정렬 */
        width: 100%;
        transform: translateY(-50%);
    }

    .step {
        width: 20%;
        text-align: center;
        position: relative;
        padding-top: 30px; /* 텍스트를 아래로 내리기 위해 패딩 추가 */
    }


    .step::before {
        content: '';
        position: absolute;
        top: 16%; /* 원의 위치를 조정합니다 */
        left: 50%;
        transform: translateX(-50%);
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: white;
        border: 2px solid green;
        transition: background-color 0.4s ease, border-color 0.4s ease;
    }

    .step.active::before {
        background-color: green;
        border-color: green;
    }

    .btn-custom-auto {
        background-color: #cce5ff; /* 연한 파란색 */
        color: #004085;
        border: 1px solid #b8daff;
    }

    .btn-custom-auto:hover {
        background-color: #c0c0c0;
        border-color: #b0b0b0;
        color: #1a1a1a;
    }


</style>



<div id="layoutSidenav_content">
    <main>
        <div class="container-fluid px-4">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <h1 class="mt-4">Leads</h1>
                <button onclick="location.href='/leads'" class="back-btn">🔙</button>
            </div>
            <ol class="breadcrumb mb-4">
                <li class="breadcrumb-item active">Leads</li>
            </ol>
            <div class="row">
            </div>
            <div class="row">
            </div>



            <!-- 리드 상세내용 부분 -->
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-table me-1"></i>
                    Leads detail
                </div>


                <div class="card-body">
                    <table id="leads_detail">
                        <!-- 파일 업로드 및 처리 -->
                    <div class="button-container mb-3">

                        {{^leadId}}
                            <!-- 숨겨진 파일 입력 필드 -->
                            <input type="file" id="fileInput" accept=".webm, .mp3, .wav" style="display: none;">

                            <!-- 자동 생성 버튼 -->
                            <button type="button" class="btn btn-custom-auto btn-sm" id="autoButton">
                                <i class= aria-hidden="true"></i> 💡 AI 자동 생성 💡
                            </button>
                        {{/leadId}}



                        {{#leads}}
                            <a href="/leads/detail/create" class="btn btn-custom-create btn-sm" id="createButton">
                                <i class="fas fa-plus-circle"></i> 신규
                            </a>

                            <button class="btn btn-custom-delete btn-sm" id="deleteButton">
                                <i class="fas fa-trash"></i> 삭제
                            </button>

                            <a href="/leads" class="btn btn-custom-select btn-sm" id="selectButton">
                                <i class="fas fa-list"></i> 목록
                            </a>


                    </div>




                            {{#leadId}}
                            <form id="leadForm" action="/leads/detail/{{leadId}}/update" method="POST">
                            {{/leadId}}
                            {{^leadId}}
                            <form id="leadForm" action="/leads/detail/create" method="POST">
                            {{/leadId}}



                            <div class="mb-3 row">
                                <label for="createdDate" class="col-sm-2 col-form-label">생성일자:</label>
                                <div class="col-sm-10">
                                    <input type="date" class="form-control" id="createdDate" name="createdDate" value="{{createdDate}}" required>
                                </div>
                            </div>

                            <div class="mb-3 row">
                                <label for="targetCloseDate" class="col-sm-2 col-form-label">마감기한:</label>
                                <div class="col-sm-10">
                                    <input type="date" class="form-control" id="targetCloseDate" name="targetCloseDate" value="{{targetCloseDate}}" required>
                                </div>
                            </div>

                            <div class="mb-3 row">
                                <label for="leadSource" class="col-sm-2 col-form-label">리드소스:</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" id="leadSource" name="leadSource" value="{{leadSource}}" placeholder="예: 미팅, 이메일, 팩스">
                                </div>
                            </div>

                            <div class="mb-3 row">
                                <label for="leadStatus" class="col-sm-2 col-form-label">리드상태:</label>
                                <div class="col-sm-10">
                                    <select class="form-control" id="leadStatus" name="leadStatus" required>
                                        <option value="Proposal">Proposal</option>
                                        <option value="Under Review">Under Review</option>
                                        <option value="Accepted">Accepted</option>
                                        <option value="Rejected">Rejected</option>
                                        <option value="Pending">Pending</option>
                                    </select>
                                </div>
                            </div>

                                    <div class="mb-3 row">
                                        <label for="companyInput" class="col-sm-2 col-form-label">회사 명:</label>
                                        <div class="col-sm-10">
                                            <!-- 입력 필드와 자동완성 옵션을 합친 datalist -->
                                            <input list="accountsList" class="form-control" id="companyInput" placeholder="회사명 선택 또는 직접 입력" oninput="handleCompanyInput()" required />
                                            <datalist id="accountsList">
                                                {{#accounts}}
                                                    <option value="{{accountName}}" data-id="{{accountId}}">
                                                        {{accountName}} (ID: {{accountId}})
                                                    </option>
                                                {{/accounts}}
                                            </datalist>
                                        </div>
                                    </div>

                                    <!-- Hidden Field for Final Data -->
                                    <input type="hidden" id="accountId" name="accountId" />
                                    <input type="hidden" id="companyName" name="companyName" />

                                    <div class="mb-3 row">
                                <label for="employeeId" class="col-sm-2 col-form-label">기회 담당자:</label>
                                <div class="col-sm-10">
                                    <select id="employeeId" name="employeeId" required>

                                        <option value="">-- 담당자 선택 --</option>
                                        {{#employee}}
                                            <option value="{{employeeId}}">
                                                {{employeeName}} (ID: {{employeeId}})
                                            </option>
                                        {{/employee}}

                                    </select>
                                </div>
                            </div>

                            <div class="mb-3 row">
                                <label for="customerRepresentitive" class="col-sm-2 col-form-label">계정 담당자:</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" id="customerRepresentitive" name="customerRepresentitive" value="{{customerRepresentitive}}" placeholder="담당자 이름 입력" required>
                                </div>
                            </div>

                            <div class="mb-3 row">
                                <label for="c_tel" class="col-sm-2 col-form-label">연락처:</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" id="c_tel" name="c_tel" value="{{c_tel}}" placeholder="예: 010-1234-5678" required>
                                </div>
                            </div>
                            <div class="mb-3 row">
                                <label for="customerRequirements" class="col-sm-2 col-form-label">리드 내용:</label>
                                <div class="col-sm-10">
                                    <input type="text" class="form-control" id="customerRequirements" name="customerRequirements" value="{{customerRequirements}}" placeholder="고객 요구사항 입력" required>
                                </div>
                            </div>
                            <div class="d-flex justify-content-end">
                                <button type="submit" id="updateButton" class="btn btn-custom-update btn-sm">
                                    <i class="fas fa-save"></i> 저장
                                </button>
                            </div>
                        </form>
                        {{/leads}}
                    </form>
                    </table>

                </div>
            </div>

            {{#leadId}}
                <!-- 리드 상태 부분 -->
                <div class="card mb-4">
                    <div class="card-header">
                        <i class="fas fa-table me-1"></i>
                        Lead Status
                    </div>
                    <div class="card-body">
                        <table id="lead_status">


                            <div class="progress-container">
                                <div class="progress-bar" id="progressBar"></div>
                                <div class="progress-steps">
                                    <div class="step" data-step="Proposal">
                                        <span>Proposal</span>
                                    </div>
                                    <div class="step" data-step="UnderReview">
                                        <span>UnderReview</span>
                                    </div>
                                    <div class="step" data-step="Closed">
                                        <span>Closed</span>
                                    </div>
                                </div>
                            </div>


                        </table>
                    </div>
                </div>
            {{/leadId}}
        </div>

    </main>


    <script>

        // CRUD 메시지
        {{#message}}
            alert("{{message}}");
        {{/message}}

                // Form 부분 리드상태 초기값 연동 JS (select Form은 html로 초기 value 지정이 안되어서 JS로 처리)
    {{#leads}}
        {{#leadId}}
        document.addEventListener("DOMContentLoaded", function() {
            // Mustache 템플릿에서 서버 데이터를 가져옴
            var leadStatus = "{{leadStatus}}";
            {{#accountId.accountId}}
                var accountId = "{{accountId.accountId}}";
            {{/accountId.accountId}}
            var employeeId = "{{employeeId.employeeId}}";
            var leadSource = "{{leadSource}}";
            var companyName = "{{companyName}}";

            // accountId가 null인 경우 기본값 설정
            if (!accountId || accountId === "null") {
                accountId = ""; // 기본값으로 빈 문자열 설정
            }

            // 폼에 데이터 채우기
            document.getElementById("leadStatus").value = leadStatus;
            {{#accountId.accountId}}
            document.getElementById("accountId").value = accountId;
            {{/accountId.accountId}}
            document.getElementById("employeeId").value = employeeId;
            document.getElementById("leadSource").value = leadSource;
            document.getElementById("companyName").value = companyName;
            document.getElementById("companyInput").value = companyName;
        });
        {{/leadId}}

        // select 폼데이터 조회 기능 (main/header와 footer에 CSS 추가, 상단에 Selectize CSS, JS로 명시)

        document.addEventListener("DOMContentLoaded", function() {
             // 계정 검색
            $('#accountId').selectize({
                            create: false,
                            sortField: 'text'
                        });
            // 직원 검색
            $('#employeeId').selectize({
                create: false,
                sortField: 'text'
            });
        });

        function handleCompanyInput() {
            const inputField = document.getElementById('companyInput'); // 입력 필드
            const accountIdField = document.getElementById('accountId'); // 숨겨진 accountId 필드
            const companyNameField = document.getElementById('companyName'); // 숨겨진 companyName 필드
            const dataList = document.getElementById('accountsList'); // datalist

            const inputValue = inputField.value.trim(); // 입력값
            let matchedAccount = null;

            // 초기화
            accountIdField.value = ''; // accountId 초기화
            companyNameField.value = ''; // companyName 초기화

            // datalist 옵션 순회하여 입력값과 일치하는 데이터 검색
            Array.from(dataList.options).forEach(option => {
                if (option.value === inputValue) {
                    matchedAccount = option; // 일치하는 옵션 저장
                }
            });

            if (matchedAccount) {
                // 입력값이 datalist 옵션 중 하나와 일치할 경우
                accountIdField.value = matchedAccount.getAttribute('data-id');
                companyNameField.value = matchedAccount.value;
            } else {
                // 입력값이 datalist 옵션에 없을 경우 (직접 입력)
                accountIdField.value = null; // accountId는 null로 설정
                companyNameField.value = inputValue; // 입력값을 companyName에 저장
            }
        }





    // 폼 제출 시 회사명이 비어 있는지 확인
    document.querySelector("form").addEventListener("submit", function (e) {
        const companyNameField = document.getElementById("companyName");

        if (!companyNameField.value.trim()) {
            alert("회사 명을 입력하거나 선택해주세요!");
            e.preventDefault(); // 폼 제출 중단
        }
    });

        document.addEventListener("DOMContentLoaded", function() {
        {{#leadId}}
            var deleteButton = document.getElementById("deleteButton");
            if (deleteButton) {
                deleteButton.addEventListener("click", function () {
                    // 서버에서 렌더링된 leadId 가져오기
                    var leadId = "{{leadId}}";

                if (leadId) {
                    var confirmDelete = confirm("현재 항목을 삭제하시겠습니까?");
                    if (confirmDelete) {
                        fetch(`/leads/detail/${leadId}/delete`, {
                            method: "POST", // 서버 엔드포인트가 POST를 지원해야 함
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({ id: leadId }), // 올바른 데이터 전송
                        })
                            .then((response) => {
                                if (response.ok) {
                                    alert("삭제되었습니다.");
                                    window.location.href = "/leads"; // 삭제 후 이동
                                } else {
                                    alert("삭제 중 오류가 발생했습니다.");
                                }
                            })
                            .catch((error) => {
                                console.error("Error:", error);
                                alert("삭제 중 오류가 발생했습니다.");
                            });
                    }
                } else {
                    alert("삭제할 ID가 없습니다.");
                }
            });
            }
        {{/leadId}}
    });




    // Form 삭제버튼 클릭 시 현 주소가 create인경우 create로 action주소 변경.

    document.addEventListener("DOMContentLoaded", function() {
        var form = document.getElementById("leadForm");
        var currentUrl = window.location.pathname;

        // 현재 URL이 "/leads/detail/create"인 경우 폼 액션을 변경
        if (currentUrl === "/leads/detail/create") {
            form.action = "/leads/detail/create";
        }

        // 저장 버튼 클릭 시 변경사항 저장 여부 확인
        document.getElementById("updateButton").addEventListener("click", function(event) {
            var confirmSave = confirm("변경사항을 저장하겠습니까?");

            if (!confirmSave) {
                // 사용자가 취소를 클릭한 경우 폼 제출 중단
                event.preventDefault();
            }
        });
    });




    // 현재 진행상황 bar JS
        document.addEventListener("DOMContentLoaded", function () {
        const progressSteps = document.querySelectorAll(".step");
        const progressBar = document.getElementById("progressBar");

        // 단계 목록
        const steps = ["Proposal", "UnderReview", "Closed"];

        // `leadStatus`와 단계 매핑
        const statusMapping = {
            "Proposal": "Proposal",
            "Under Review": "UnderReview",
            "Accepted": "Closed",
            "Rejected": "Closed",
            "Pending": "Closed"
        };

        // 서버에서 전달된 `leadStatus` 값
        const leadStatus = "{{leadStatus}}" || "제안됨"; // 기본값은 "제안됨"
        const currentStep = statusMapping[leadStatus] || "Proposal";

        const currentIndex = steps.indexOf(currentStep);
        if (currentIndex === -1) return;

        // 진행 퍼센트 계산

        const intervals = steps.length - 1;
        const progressPercent = (currentIndex / intervals) * 80;
        console.log(currentIndex)
        console.log(intervals)
        console.log(progressPercent)


        // 진행 바 너비 설정
        progressBar.style.width = progressPercent + "%";

        // 활성화된 스텝 표시
        progressSteps.forEach((step, index) => {
            if (index <= currentIndex) {
                step.classList.add("active");
            } else {
                step.classList.remove("active");
            }
        });
    });


// AI 리드 자동생성
    document.addEventListener('DOMContentLoaded', function () {
    const autoButton = document.getElementById('autoButton');
    const fileInput = document.getElementById('fileInput');

    // "자동 생성" 버튼 클릭 시 숨겨진 파일 입력 필드 클릭
    autoButton.addEventListener('click', function () {
        fileInput.click(); // 숨겨진 파일 입력 필드를 클릭
    });

    // 파일 선택 이벤트 처리
    fileInput.addEventListener('change', function (event) {
        const selectedFile = event.target.files[0];

        if (!selectedFile) {
            alert('파일이 선택되지 않았습니다.');
            return;
        }

        console.log('선택된 파일:', selectedFile.name);

        // 서버로 파일 업로드
        uploadFile(selectedFile);
    });

    // 파일 업로드 함수
    function uploadFile(file) {
        const formData = new FormData();
        formData.append('audio_file', file);

         // "제안서 생성 중입니다" 알림창 표시
        alert('생성 중입니다 . . . . 🚀  잠시만 기다려 주세요. ');

        fetch('/leads/auto' , {
            method: 'POST',
            body: formData,
        })
        .then((response) => {
            if (!response.ok) {
                throw new Error('파일 업로드 실패');
            }
            return response.json(); // JSON 형식으로 응답 받기
        })
        .then((data) => {
            console.log('서버 응답 데이터:', data);

            // 폼에 데이터 채우기
            populateForm(data.data); // 서버에서 받은 데이터를 populateForm 함수로 전달
        })
        .catch((error) => {
            console.error('파일 업로드 중 오류 발생:', error);
            alert('파일 업로드 중 오류가 발생했습니다.🚨');
        });
    }

    // 폼에 데이터를 입력하는 함수
    function populateForm(data) {
        try {
            // 서버에서 받은 JSON 데이터를 파싱
            const parsedData = typeof data === 'string' ? JSON.parse(data) : data;

            // 입력 필드에 데이터 채우기
            document.getElementById('companyInput').value = parsedData.companyInput || '';
            if (!companyInput.value) {
                  throw new Error('회사를 입력해주세요.');
                 }
            document.getElementById('companyName').value =  companyInput.value;
            document.getElementById('leadSource').value = parsedData.leadSource || '';
             if (!leadSource.value) {
                  throw new Error('리드소스를 입력해주세요.');
                 }
            document.getElementById('customerRepresentitive').value = parsedData.customerRepresentitive || '';
              if (!customerRepresentitive.value) {
                  throw new Error('리드담당자를 입력해주세요.');
                 }
            document.getElementById('c_tel').value = parsedData.c_tel || '';
              if (!c_tel.value) {
                  throw new Error('연락처를 입력해주세요.');
                 }
            document.getElementById('customerRequirements').value = parsedData.customerRequirements || '';
              if (!customerRequirements.value) {
                  throw new Error('리드내용을 입력해주세요.');
                 }

            alert('리드 자동생성이 완료되었습니다.✨');
        } catch (error) {
            console.error('JSON 파싱 오류:', error);
            alert('데이터를 처리하는 중 오류가 발생했습니다. 다시 시도해 주세요.⚠️');
        }
    }
});

    {{/leads}}
    </script>

    {{>main/footer}}