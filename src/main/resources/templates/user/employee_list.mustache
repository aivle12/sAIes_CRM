{{>main/header}}

<style>
    .button-container {
        display: flex;
        justify-content: flex-end; /* 오른쪽 정렬 */
        gap: 10px; /* 버튼 간격 */
    }
    .btn-custom-create {
        background-color: #d4edda; /* 파스텔 그린 */
        border-color: #c3e6cb;
        color: #155724;
    }
    .btn-custom-delete {
        background-color: #f8d7da; /* 파스텔 레드 */
        border-color: #f5c6cb;
        color: #721c24;
    }
    .btn-custom-create:hover {
        background-color: #c3e6cb; /* 약간 어두운 그린 */
        border-color: #b1dfbb;
    }
    .btn-custom-delete:hover {
        background-color: #f5c6cb; /* 약간 어두운 레드 */
        border-color: #f1b0b7;
    }
    .btn-sm {
        font-size: 0.875rem; /* 버튼 폰트 크기 감소 */
        padding: 0.25rem 0.5rem; /* 패딩 감소 */
    }


</style>


<div id="layoutSidenav_content">
    <main>
        <div class="container-fluid px-4">
            <h1 class="mt-4">Members</h1>
            <ol class="breadcrumb mb-4">
                <li class="breadcrumb-item active">Members</li>
            </ol>
            <!-- 사원 테이블 -->
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-table me-1"></i>
                    Members
                </div>
                <div class="card-body">
                    <table id="datatablesSimple">

                        <div class="button-container mb-3">
                            {{#isAdmin}}
                            <a href="/admin/employee-signup" class="btn btn-custom-create btn-sm" id="createButton">
                                <i class="fas fa-plus-circle"></i>유저 계정 생성
                            </a>
                            <button class="btn btn-custom-delete btn-sm" id="deleteButton">
                                <i class="fas fa-plus-circle"></i>삭제
                            </button>
                            {{/isAdmin}}
                        </div>

                        <thead>
                        <tr>
                            {{#isAdmin}}
                            <th></th>
                            {{/isAdmin}}
                            <th>이름</th>
                            <th>직급</th>
                            <th>부서</th>
                            <th>팀</th>
                        </tr>
                        </thead>
                        <tbody>
                        {{#employeeList}}
                            <tr data-index="{{employeeId}}">
                                {{#isAdmin}}
                                <td><input type="checkbox" class="select-row" value="{{employeeId}}"></td>
                                {{/isAdmin}}
                                {{#isAdmin}}
                                <td><a href="/admin/employee-detail/{{employeeId}}">{{employeeName}}</a></td>
                                {{/isAdmin}}
                                {{^isAdmin}}
                                <td>{{employeeName}}</td>
                                {{/isAdmin}}
                                <td>{{position}}</td>
                                <td>{{dept}}</td>
                                <td>{{team}}</td>
                            </tr>
                        {{/employeeList}}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var deleteButton = document.getElementById("deleteButton");
            if (deleteButton) {
                deleteButton.addEventListener("click", function () {
                    var selectedCheckboxes = document.querySelectorAll(".select-row:checked");
                    var selectedIds = [];

                    selectedCheckboxes.forEach(function (checkbox) {
                        var accountId = checkbox.value;
                        console.log("employeeID:", accountId); // 로그 추가
                        selectedIds.push(accountId);
                    });

                    if (selectedIds.length > 0) {
                        var confirmDelete = confirm("선택한 항목들을 삭제하시겠습니까?");

                        if (confirmDelete) {
                            console.log("Deleting IDs:", selectedIds); // 로그 추가

                            fetch("/admin/employee/delete", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({ids: selectedIds})
                            })
                                    .then(response => {
                                        if (response.ok) {
                                            alert("선택한 항목이 성공적으로 삭제되었습니다.");
                                            window.location.href = "/employee-list"; // 성공 시 리다이렉트
                                        } else if (response.status === 400) {
                                            alert("잘못된 요청입니다. 삭제할 항목을 다시 확인해 주세요.");
                                        } else if (response.status === 404) {
                                            alert("삭제 요청에 실패했습니다. 존재하지 않는 ID가 포함되어 있습니다.");
                                        } else if (response.status === 500) {
                                            alert("서버에서 오류가 발생했습니다. 잠시 후 다시 시도해 주세요.");
                                        }
                                    })
                                    .catch(error => {
                                        console.error("Network Error:", error);
                                        alert("네트워크 오류가 발생했습니다. 다시 시도해 주세요.");
                                    });
                        }
                    } else {
                        alert("삭제할 항목을 선택해 주세요.");
                    }

                });
            }
        });
    </script>

{{>main/footer}}