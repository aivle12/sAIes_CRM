
<style>

.btn-custom-proposal {
background-color: #cce5ff; /* 연한 파란색 */
color: #004085;
border: 1px solid #b8daff;
}

</style>


<div class="card mb-4">
    <div class="card-header">
        <i class="fas fa-table me-1"></i>
        진행중 기회 목록
    </div>
    <div class="card-body">
        <div class="button-container mb-3" style="display: flex; align-items: center; gap: 10px;">
            <!-- 제안서 생성 버튼 -->
            <button type="button" id="proposalExcelButton" class="btn btn-custom-proposal btn-sm">

                <i class= aria-hidden="true"></i>  💡AI 제안서 excel 파일 생성 💡
            </button>

            <!-- 제안서 생성 버튼 -->
            <button type="button" id="proposalButton" class="btn btn-custom-proposal btn-sm">

                <i class= aria-hidden="true"></i>💡AI 제안서 ppt 파일 생성 💡
            </button>
        </div>
        <table id="datatablesSimple" class="table table-bordered">
            <thead>
            <tr>
                <th></th>
                <th>ID</th>
                <th>기회명</th>
                <th>상태</th>
            </tr>
            </thead>
            <tbody>
            {{#pagination.contents}}
                <tr data-index="{{opportunityId}}"
                    data-employee="{{employeeId.employeeName}}"
                    data-product="{{productId.productName}}"
                    data-opportunity-inquiries="{{opportunityInquiries}}">
                    <td><input type="checkbox" class="select-row" value="{{opportunityId}}"></td>
                    <td>{{opportunityId}}</td>
                    <td>
                        <a href="/opportunities/detail/{{opportunityId}}">
                            {{opportunityName}}
                        </a>
                    </td>
                    <td>{{opportunityStatus}}</td>
                </tr>
            {{/pagination.contents}}
            </tbody>
        </table>
        <div class="pagination justify-content-center mt-3">
            {{#pagination.hasPreviousPage}}
                <button class="btn btn-outline-primary pagination-button" data-page="{{pagination.previousPage}}">
                    이전
                </button>
            {{/pagination.hasPreviousPage}}
            {{#pagination.pageNumbers}}
                <button class="btn btn-outline-secondary pagination-button {{#isActive}}active{{/isActive}}" data-page="{{page}}">
                    {{displayPage}}
                </button>
            {{/pagination.pageNumbers}}
            {{#pagination.hasNextPage}}
                <button class="btn btn-outline-primary pagination-button" data-page="{{pagination.nextPage}}">
                    다음
                </button>
            {{/pagination.hasNextPage}}
        </div>
    </div>
</div>

<script>

    document.addEventListener("DOMContentLoaded", function () {
        // ✅ 이벤트 위임 방식으로 변경하여 클릭 감지
        document.addEventListener("click", function (event) {
            const target = event.target.closest(".pagination-button");
            if (!target) return; // pagination 버튼이 아닌 경우 무시

            event.preventDefault(); // 기본 동작 방지

            let page = target.getAttribute("data-page");
            if (!page) return;

            let url = `/api/opportunities/ongoing?page=${page}&size=10`;

            // URL 상태 변경 (뒤로 가기 가능)
            window.history.pushState({}, "", url);

            // 데이터를 비동기적으로 불러오기
            loadOpportunities(url);
        });
    });

    function loadOpportunities(url) {
        fetch(url, {
            method: "GET",
            headers: { "X-Requested-With": "XMLHttpRequest" } // AJAX 요청임을 명시
        })
        .then(response => response.text())
        .then(html => {
            let parser = new DOMParser();
            let doc = parser.parseFromString(html, "text/html");

            // ✅ 테이블만 업데이트 (모달 삭제 방지)
            let newTable = doc.querySelector("#datatablesSimple"); // 새 테이블 가져오기
            let newPagination = doc.querySelector(".pagination"); // 새 페이지네이션 가져오기

            if (newTable) {
                document.querySelector("#datatablesSimple").innerHTML = newTable.innerHTML;
            }
            if (newPagination) {
                document.querySelector(".pagination").innerHTML = newPagination.innerHTML;
            }
        })
        .catch(error => console.error("Error loading opportunities:", error));
    }

    // ✅ 뒤로 가기/앞으로 가기 이벤트 처리
    window.addEventListener("popstate", function () {
        loadOpportunities(window.location.href);
    });





            document.addEventListener('click', function(event) {
                    if (event.target.closest('#proposalExcelButton')) { // AIButton 클릭 감지
                        try {
                            const selectedCheckboxes = document.querySelectorAll(".select-row:checked");

                            // 🔹 체크된 개수 확인 (1개만 허용)
                            if (selectedCheckboxes.length > 1) {
                                alert("하나의 항목만 선택해 주세요.");
                                return;
                            }

                            if (selectedCheckboxes.length === 0) {
                                throw new Error("제안서를 생성할 항목을 선택해 주세요.");
                            }

                            const selectedRow = selectedCheckboxes[0].closest("tr"); // 체크된 행 가져오기

                            const employeeId = selectedRow.getAttribute("data-employee") || "미지정";
                            const productId = selectedRow.getAttribute("data-product") || "미지정";
                            const opportunityInquiries = selectedRow.getAttribute("data-opportunity-inquiries") || "요구사항 없음";

                            // 🔹 추가된 로그
                            console.log("선택된 행의 데이터:", selectedRow.outerHTML);
                            console.log("employeeId:", employeeId);
                            console.log("productId:", productId);
                            console.log("opportunityInquiries:", opportunityInquiries);

                            const dataToSend = {
                                담당자: employeeId,
                                제품: productId,
                                고객요구사항: opportunityInquiries
                            };

                            console.log('전송할 데이터:', dataToSend);

                            fetch('https://saiescrm.api.jyds.synology.me/generate-excel', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(dataToSend)
                            })
                            .then(response => response.blob())
                            .then(blob => {
                                const url = window.URL.createObjectURL(new Blob([blob]));
                                const link = document.createElement('a');
                                link.href = url;
                                link.setAttribute('download', `proposal.xlsx`);
                                document.body.appendChild(link);
                                link.click();
                                window.URL.revokeObjectURL(url);
                                link.remove();
                                alert('제안서 다운로드가 완료되었습니다.');
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('제안서 생성 중 오류가 발생했습니다. 다시 시도해 주세요.');
                            });
                        } catch (error) {
                            console.error('Error:', error);
                            alert(error.message);
                        }
                    }
                });


                document.addEventListener('click', function(event) {
                    if (event.target.closest('#proposalButton')) { // AIButton 클릭 감지
                        try {
                            const selectedCheckboxes = document.querySelectorAll(".select-row:checked");

                            // 🔹 체크된 개수 확인 (1개만 허용)
                            if (selectedCheckboxes.length > 1) {
                                alert("하나의 항목만 선택해 주세요.");
                                return;
                            }

                            if (selectedCheckboxes.length === 0) {
                                throw new Error("제안서를 생성할 항목을 선택해 주세요.");
                            }

                            const selectedRow = selectedCheckboxes[0].closest("tr"); // 체크된 행 가져오기

                            const employeeId = selectedRow.getAttribute("data-employee") || "미지정";
                            const productId = selectedRow.getAttribute("data-product") || "미지정";
                            const opportunityInquiries = selectedRow.getAttribute("data-opportunity-inquiries") || "요구사항 없음";

                            // 🔹 추가된 로그
                            console.log("선택된 행의 데이터:", selectedRow.outerHTML);
                            console.log("employeeId:", employeeId);
                            console.log("productId:", productId);
                            console.log("opportunityInquiries:", opportunityInquiries);

                            const dataToSend = {
                                담당자: employeeId,
                                제품: productId,
                                고객요구사항: opportunityInquiries
                            };

                            console.log('전송할 데이터:', dataToSend);

                            fetch('https://saiescrm.api.jyds.synology.me/generate-ppt', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(dataToSend)
                            })
                            .then(response => response.blob())
                            .then(blob => {
                                const url = window.URL.createObjectURL(new Blob([blob]));
                                const link = document.createElement('a');
                                link.href = url;
                                link.setAttribute('download', `proposal.pptx`);
                                document.body.appendChild(link);
                                link.click();
                                window.URL.revokeObjectURL(url);
                                link.remove();
                                alert('제안서 다운로드가 완료되었습니다.');
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                alert('제안서 생성 중 오류가 발생했습니다. 다시 시도해 주세요.');
                            });
                        } catch (error) {
                            console.error('Error:', error);
                            alert(error.message);
                        }
                    }
                });


</script>
